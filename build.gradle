plugins {
	id 'org.springframework.boot' version '2.4.0'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'idea'
	id 'com.google.cloud.tools.jib' version '2.7.0'
	id "org.openapi.generator" version '4.3.1'

	//TODO: use a Liquibase plugin
	//id 'org.liquibase.gradle' version '2.0.4'
}

group = 'com.fdobrotv'
version = '0.5.7'
sourceCompatibility = '15'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', "2020.0.0-M6")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	//Registration/discovery service client
	implementation 'org.springframework.cloud:spring-cloud-kubernetes-client-discovery'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	//For legacy support of the bootstrap.yml instead of Vault
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

	//We need to have some embedded container for work continuously
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//OpenApi generator and web
	implementation("io.springfox:springfox-boot-starter:3.0.0") {
		exclude group: "io.springfox", module: "springfox-swagger-ui"
	}
	implementation 'org.openapitools:jackson-databind-nullable:0.2.0'

	//Spring retry
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	//Spring reactive
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	//DB schema change management
	implementation 'org.liquibase:liquibase-core:4.2.2'
	implementation 'org.liquibase:liquibase-groovy-dsl:3.0.0'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'

	//Jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//Postgres and CockroachDB
	implementation 'org.postgresql:postgresql:42.2.18'

	//Message bus and config propagation
	implementation 'org.springframework.cloud:spring-cloud-starter-bus-kafka'

	//TODO: Client-side load balancer
//	implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'

	//TODO: HTTP client binder inspired by Retrofit, JAXRS-2.0, and WebSocket.
//	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	//Auto-configuration for distributed tracing
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'

	//Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

jib {
	from {
		image = 'openjdk:15'
	}
	to {
		image = "fdobrotv/$rootProject.name:$version"
		tags = ["$version", 'latest']
	}
}

openApiGenerate {
	generatorName = "spring"
	inputSpec = "http://gateway-service-1.com:8080/specs/v1/products-api.yaml"
	outputDir = "$projectDir".toString()
	apiPackage = "com.fdobrotv.client_service.v1"
	packageName = "com.fdobrotv.client_service.v1.controller"
	modelPackage = "com.fdobrotv.client_service.v1.dto"
	validateSpec = true
	ignoreFileOverride = "$projectDir/.openapi-generator-ignore"
	configOptions = [
			hideGenerationTimestamp: "true",
			dateLibrary: "java8",
			interfaceOnly: "true"
	]
}

compileJava.dependsOn.tasks.openApiGenerate